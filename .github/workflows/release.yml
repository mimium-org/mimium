name: release
on:
  push:
      tags: 
        - 'v*'

jobs:
  create_release:
    name: "Create Release"
    runs-on : ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Get Changelog
        id: get_changelog
        run: |
          git diff HEAD~ -- CHANGELOG.md | grep '^+[^+]' | sed  -e "s/^+//" >| /tmp/changelog.diff.txt
      - name: Create Source Release
        id: create_release
        uses: actions/create-release@master
        with:
          body_path:  /tmp/changelog.diff.txt
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false 
  build_and_upload:
    name: "Build and Upload Binary"
    needs: create_release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-latest
        config:
          - Release
        include:
            - os: ubuntu-20.04
              cxx: /usr/bin/g++-9
              shell: bash
              zip_postfix: Linux
              cmake_args:  -DBUILD_SHARED_LIBS=OFF
            - os: macos-10.15
              cxx: /usr/bin/clang++
              shell: bash
              zip_postfix: Darwin
              cmake_args:  -DBUILD_SHARED_LIBS=ON
            - os: windows-latest
              cxx: g++
              shell: msys2 {0}
              zip_postfix: Windows
              cmake_args: -DBUILD_SHARED_LIBS=OFF
    defaults:
      run:
        shell: ${{ matrix.shell }}
    env:
      CXX: ${{matrix.cxx}}
    steps:
      - if: contains(matrix.os, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: git flex bison mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-libsndfile mingw64/mingw-w64-x86_64-opus mingw-w64-x86_64-ninja mingw-w64-x86_64-llvm
      - if: contains(matrix.os, 'macos')
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install flex bison libsndfile llvm ninja
      - if: contains(matrix.os, 'ubuntu')
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install llvm
          sudo apt-get update
          sudo apt-get install libalsa-ocaml-dev libfl-dev libbison-dev libz-dev libsndfile-dev libopus-dev gcc-9 ninja-build
      - uses: actions/checkout@v2
        with: 
          submodules: "recursive"
      - name: configure
        run:
          cmake . -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config }} ${{ matrix.cmake_args }}
      - name: build
        run: cmake --build build -j --config ${{ matrix.config }}

      - name: pack
        run: cd build && cpack && cd ../

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Get checksum
        id: get_checksum
        run: echo ::set-output name=CHECKSUM::$(sha256sum ./build/mimium-${{ steps.get_version.outputs.VERSION }}-${{ matrix.zip_postfix }}.zip)

      - name: Upload Compiled Binary
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/mimium-${{ steps.get_version.outputs.VERSION }}-${{ matrix.zip_postfix }}.zip
          asset_name: mimium-${{ steps.get_version.outputs.VERSION }}-${{ matrix.zip_postfix }}.zip
          asset_content_type: application/zip
  publish_aur: 
    name: "Publish Arch User Repository Package"
    runs-on : ubuntu-20.04
    needs: build_and_upload
    steps:
      - uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Generate PKGBUILD
        run: |
          cat ./PKGBUILD.template.txt | sed -e 's/#pkgver_template/${{ steps.get_version.outputs.VERSION }}/g' -e 's/#sha256_template/${{ steps.get_checksum.outputs.CHECKSUM }}/g' > PKGBUILD
        hoge
      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@latest
        with:
          pkgname: mimium
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,dsa,ecdsa,ed25519
  